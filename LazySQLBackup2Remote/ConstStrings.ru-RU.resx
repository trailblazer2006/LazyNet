<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AfterBackup" xml:space="preserve">
    <value>после архивирования</value>
  </data>
  <data name="AfterBackupSqlScriptCaption" xml:space="preserve">
    <value>Пользовательский сценарий SQL для запуска ПОСЛЕ резервного копирования</value>
  </data>
  <data name="ApplicationCaption" xml:space="preserve">
    <value>Lazy SQL Backup 2 Remote</value>
  </data>
  <data name="AtDaysMonths" xml:space="preserve">
    <value>в {0} день месяца {1}</value>
  </data>
  <data name="AtTime" xml:space="preserve">
    <value>В {0:T}</value>
  </data>
  <data name="BeforeBackup" xml:space="preserve">
    <value>перед архивированием</value>
  </data>
  <data name="BeforeBackupSqlScriptCaption" xml:space="preserve">
    <value>Пользовательский сценарий SQL для запуска ПЕРЕД резервным копированием</value>
  </data>
  <data name="Cleaning" xml:space="preserve">
    <value>{0:G} Очищаем '{1}'</value>
  </data>
  <data name="Compressing" xml:space="preserve">
    <value>{0:G} Сжимаем '{1}' в '{2}'</value>
  </data>
  <data name="CompressionCompleted" xml:space="preserve">
    <value>{0:G} Сжатие завершено (архив: '{1}', размер: {2:fs})</value>
  </data>
  <data name="ConnectingTo" xml:space="preserve">
    <value>{0:G} Подключаемся к '{1}'</value>
  </data>
  <data name="ConnectingToSql" xml:space="preserve">
    <value>{0:G} Подключаемся к серверу SQL {1}</value>
  </data>
  <data name="CreatingBackup" xml:space="preserve">
    <value>{0:G} Создаем архив БД [{1}] в '{2}' ({3})</value>
  </data>
  <data name="CreatingRemoteFolder" xml:space="preserve">
    <value>{0:G} Создаем папку в хранилище '{1}'</value>
  </data>
  <data name="DatabaseFail" xml:space="preserve">
    <value>База данных {0}: Сбой</value>
  </data>
  <data name="DatabaseSuccess" xml:space="preserve">
    <value>База данных {0}: Успех</value>
  </data>
  <data name="DeleteScheduledJob" xml:space="preserve">
    <value>Удалить запланированное задание {0}?</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>ПОДРОБНОСТИ:</value>
  </data>
  <data name="DisconnectingFrom" xml:space="preserve">
    <value>{0:G} Отключаемся от '{1}'</value>
  </data>
  <data name="DownloadAndRestoreFinished" xml:space="preserve">
    <value>{0:G} Скачивание и восстановление завершено</value>
  </data>
  <data name="DownloadAndRestoreStarting" xml:space="preserve">
    <value>Запуск скачивания и восстановления...</value>
  </data>
  <data name="Downloading" xml:space="preserve">
    <value>{0:G} Загружаем '{1}' в '{2}' ({3})</value>
  </data>
  <data name="DownloadingFileProgress" xml:space="preserve">
    <value>Скачиваем {0}... {1}%</value>
  </data>
  <data name="EmailBody" xml:space="preserve">
    <value>Это тестовое сообщение электронной почты подтверждает, что ваш адрес электронной почты установлены правильно</value>
  </data>
  <data name="EmailError" xml:space="preserve">
    <value>Тестовое сообщение электронной почты было отправлено на Ваш почтовый ящик.
Пожалуйста, проверьте, если вы получите его!</value>
  </data>
  <data name="EmailSubject" xml:space="preserve">
    <value>{0} тестовое сообщение электронной почты</value>
  </data>
  <data name="EmailSubjectFail" xml:space="preserve">
    <value>{0}: задание {1} на компьютере {2} выполнено с ошибками</value>
  </data>
  <data name="EmailSubjectSuccess" xml:space="preserve">
    <value>{0}: задание {1} на компьютере {2} выполнено успешно</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Ошибка</value>
  </data>
  <data name="EveryDay" xml:space="preserve">
    <value>каждый день</value>
  </data>
  <data name="EveryDays" xml:space="preserve">
    <value>каждый {0} дн.</value>
  </data>
  <data name="EveryWeek" xml:space="preserve">
    <value>еженедельно</value>
  </data>
  <data name="EveryWeeks" xml:space="preserve">
    <value>каждую {0}-ю неделю</value>
  </data>
  <data name="Extracting" xml:space="preserve">
    <value>{0:G} Извлекаем '{1}' в '{2}'</value>
  </data>
  <data name="ExtractingFileProgress" xml:space="preserve">
    <value>Извлекаем {0}... {1:fs} из {2:fs}</value>
  </data>
  <data name="ExtractionCompleted" xml:space="preserve">
    <value>{0:G} Извлечение завершено (архив: '{1}', размер: {2:fs})</value>
  </data>
  <data name="FailReportNotSent" xml:space="preserve">
    <value>Отчет об ошибках не был отправлен получателю {0} ({1})</value>
  </data>
  <data name="FailReportSent" xml:space="preserve">
    <value>Отчет об ошибках был отправлен получателю {0} ({1})</value>
  </data>
  <data name="Information" xml:space="preserve">
    <value>Информация</value>
  </data>
  <data name="JobFilesFilter" xml:space="preserve">
    <value>Файлы Заданий (*.jobx)|*.jobx</value>
  </data>
  <data name="JobFinished" xml:space="preserve">
    <value>{0:G} Задание завершено</value>
  </data>
  <data name="JobName" xml:space="preserve">
    <value>Имя задания: {0}</value>
  </data>
  <data name="MacOffice" xml:space="preserve">
    <value>MacOffice</value>
  </data>
  <data name="Office2007" xml:space="preserve">
    <value>Office 2007</value>
  </data>
  <data name="Office2010" xml:space="preserve">
    <value>Office 2010</value>
  </data>
  <data name="Office2013" xml:space="preserve">
    <value>Office 2013</value>
  </data>
  <data name="On" xml:space="preserve">
    <value>по</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>Открыть</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>Вопрос</value>
  </data>
  <data name="RemoteFileVerified" xml:space="preserve">
    <value>{0:G} Размер файла в хранилище проверен</value>
  </data>
  <data name="RemoteFolderNotFound" xml:space="preserve">
    <value>{0:G} Папка '{1}' не найдена в хранилище</value>
  </data>
  <data name="RemovingFrom" xml:space="preserve">
    <value>{0:G} Удаляем '{1}' из '{2}'</value>
  </data>
  <data name="RemovingJunkBackup" xml:space="preserve">
    <value>{0:G} Удаляем ненужный архив '{1}'</value>
  </data>
  <data name="RestoringDatabase" xml:space="preserve">
    <value>{0:G} Восстанавливаем базу данных '{1}'</value>
  </data>
  <data name="RestoringDatabaseProgress" xml:space="preserve">
    <value>Восстанавливаем базу данных {0}... {1}</value>
  </data>
  <data name="RunJobFailure" xml:space="preserve">
    <value>сбой выполнения задания</value>
  </data>
  <data name="RunningCustomSqlScript" xml:space="preserve">
    <value>{0:G} Выполняем пользовательский SQL скрипт {1}</value>
  </data>
  <data name="SaveAs" xml:space="preserve">
    <value>Сохранить Как</value>
  </data>
  <data name="StartBoundary" xml:space="preserve">
    <value>начиная с {0:d}</value>
  </data>
  <data name="StartDownloadAndRestore" xml:space="preserve">
    <value>&gt;&gt;&gt; скачивание и восстановление запущено {0:G}</value>
  </data>
  <data name="Starting" xml:space="preserve">
    <value>Запуск приложения...</value>
  </data>
  <data name="StartJob" xml:space="preserve">
    <value>&gt;&gt;&gt; запуск задания {0:G}</value>
  </data>
  <data name="SuccessReportNotSent" xml:space="preserve">
    <value>Отчет об успехе не был отправлен получателю {0} ({1})</value>
  </data>
  <data name="SuccessReportSent" xml:space="preserve">
    <value>Отчет об успехе был отправлен получателю {0} ({1})</value>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>СВОДКА:</value>
  </data>
  <data name="Uploading" xml:space="preserve">
    <value>{0:G} Закачиваем '{1}' в '{2}' ({3})</value>
  </data>
  <data name="LocalFileVerified" xml:space="preserve">
    <value>{0:G} Локалный файл найден и проверен</value>
  </data>
  <data name="RemoteFileNotFound" xml:space="preserve">
    <value>{0:G} Файл '{1}' не найден в хранилище</value>
  </data>
  <data name="ZipFileNotFound" xml:space="preserve">
    <value>{0:G} Файл '{1}' не найден в архиве</value>
  </data>
  <data name="NoRecoveryArchiveSelected" xml:space="preserve">
    <value>Не выбран архив для восстановления!</value>
  </data>
</root>